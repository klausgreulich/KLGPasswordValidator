<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-17 at 14:15:47.
 */
 
require_once(dirname(__FILE__).'/KLGPasswordValidator.php');
 
class KLGPasswordValidatorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var KLGPasswordValidator
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

 	public function testBasic()
 	{
 		$configuration = array(
    		'minimumLength' => 8,
			'containsNumber' => false,
			'containsSpecialCharacter' => false,
			'rejectUsernameInPassword' => false,
			'rejectSubstrings' => array()
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('secret');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	
    	$this->object->setPassword('12345678');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertTrue($ok);    	
 	}
    
    public function testContainsNumber()
 	{
 		$configuration = array(
    		'minimumLength' => 8,
			'containsNumber' => 3,
			'containsSpecialCharacter' => false,
			'rejectUsernameInPassword' => false,
			'rejectSubstrings' => array()
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('secretklaus');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	$this->assertTrue(in_array('PASSWORD_NOT_ENOUGH_NUMBERS:3',$this->object->getErrors()));
    	
    	$this->object->setPassword('secret4klaus1');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	$this->assertTrue(in_array('PASSWORD_NOT_ENOUGH_NUMBERS:3',$this->object->getErrors()));
    	
    	$this->object->setPassword('secret4klaus13ab');
    	
    	$ok = $this->object->isPasswordValid();

    	$this->assertTrue($ok); 
    	$this->assertTrue(count($this->object->getErrors())==0);   	
 	}
 	
 	public function testContainsSpecialCharacters()
 	{
 		$configuration = array(
    		'minimumLength' => 8,
			'containsNumber' => 0,
			'containsSpecialCharacter' => 3,
			'rejectUsernameInPassword' => false,
			'rejectSubstrings' => array()
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('secretklaus');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	$this->assertTrue(in_array('PASSWORD_NOT_ENOUGH_SPECIAL_CHARACTERS:3',$this->object->getErrors()));
    	
    	$this->object->setPassword('secret%klaus!');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	$this->assertTrue(in_array('PASSWORD_NOT_ENOUGH_SPECIAL_CHARACTERS:3',$this->object->getErrors()));
    	
    	$this->object->setPassword('secret%klaus!?ab');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	
    	$this->assertTrue($ok); 
    	$this->assertTrue(count($this->object->getErrors())==0);   	
 	}
 	
 	public function testRejectUsername()
 	{
 		$configuration = array(
    		'minimumLength' => 8,
			'containsNumber' => 0,
			'containsSpecialCharacter' => 3,
			'rejectUsernameInPassword' => true,
			'rejectSubstrings' => array()
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('secretklaus');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	
    	$this->assertTrue(in_array('PASSWORD_CONTAINS_USERNAME',$this->object->getErrors()));
    	
    	$this->object->setPassword('secret%klaus!!');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	$this->assertTrue(in_array('PASSWORD_CONTAINS_USERNAME',$this->object->getErrors()));
    	
    	$this->object->setPassword('secret%kLaUs!!');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	$this->assertTrue(in_array('PASSWORD_CONTAINS_USERNAME',$this->object->getErrors()));
    	
    	$this->object->setPassword('secret%!!forme');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	
    	$this->assertTrue($ok); 
    	$this->assertTrue(count($this->object->getErrors())==0);   	
 	}
 	
 	public function testRejectSubstrings()
 	{
 		$configuration = array(
    		'minimumLength' => 8,
			'containsNumber' => 0,
			'containsSpecialCharacter' => 0,
			'rejectUsernameInPassword' => false,
			'rejectSubstrings' => array('secret','foo')
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('secret4foo');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	
    	$this->assertTrue(in_array('PASSWORD_CONTAINS_SUBSTRING:secret',$this->object->getErrors()));
    	
    	$this->object->setPassword('!!!foo!!!klaus');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	$this->assertTrue(in_array('PASSWORD_CONTAINS_SUBSTRING:foo',$this->object->getErrors()));
    	
    	$this->object->setPassword('foosecret');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	$this->assertTrue(in_array('PASSWORD_CONTAINS_SUBSTRING:foo',$this->object->getErrors()));
    	
    	$this->object->setPassword('geheim%!!forme');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	
    	$this->assertTrue($ok); 
    	$this->assertTrue(count($this->object->getErrors())==0);   	
 	}
 	
 	/**
     * @expectedException InvalidArgumentException
     */
 	public function testRejectOldPasswordFail()
 	{
 		$configuration = array(
    		'minimumLength' => 8,
			'containsNumber' => 0,
			'rejectPreviousPasswords' => true,
			'containsSpecialCharacter' => 0,
			'rejectUsernameInPassword' => false,
			'rejectSubstrings' => array()
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('secret4foo');
    	
    	$ok = $this->object->isPasswordValid();
    	
 	}
    
    public function testRejectOldPassword()
 	{
 		$configuration = array(
    		'minimumLength' => 8,
			'containsNumber' => true,
			'rejectPreviousPasswords' => true,
			'containsSpecialCharacter' => true,
			'rejectUsernameInPassword' => false,
			'rejectSubstrings' => array()
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('secret4foo');
		$this->object->setPasswordDelegate($this);		
		    	
    	$ok = $this->object->isPasswordValid();
		    	
    	$this->assertFalse($ok);
    	$this->assertTrue(in_array('PASSWORD_PREVIOUSLY_USED',$this->object->getErrors()));
    	
    	
    	$this->object->setPassword('geheim%!!forme3');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	
    	$this->assertTrue($ok); 
    	$this->assertTrue(count($this->object->getErrors())==0);   	
 	}
 	
 	/**
     * @expectedException InvalidArgumentException
     */
 	public function testRejectOldPasswordFail2()
 	{
 		$configuration = array(
    		'minimumLength' => 8,
			'containsNumber' => 0,
			'rejectPreviousPasswords' => true,
			'containsSpecialCharacter' => 0,
			'rejectUsernameInPassword' => false,
			'rejectSubstrings' => array()
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('secret4foo');
		$this->object->setPasswordDelegate(new EmptyClass());		
		    	
    	$ok = $this->object->isPasswordValid();
		    	
 	}
    
    public function testValidateCases()
 	{
 		$configuration = array(
    		'minimumLength' => 8,
			'containsNumber' => 0,
			'containsSpecialCharacter' => 0,
			'rejectUsernameInPassword' => false,
			'validateCases' => true
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('secret4foo');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	
    	$this->assertTrue(in_array('PASSWORD_CONTAINS_NO_UPPERCASE',$this->object->getErrors()));
    	
    	$this->object->setPassword('SECRET4FOO');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	
    	$this->assertTrue(in_array('PASSWORD_CONTAINS_NO_LOWERCASE',$this->object->getErrors()));
    	
    	$this->object->setPassword('gEheim%!!forme');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	
    	$this->assertTrue($ok); 
    	$this->assertTrue(count($this->object->getErrors())==0);   	
 	}
 	
 	/**
     * @expectedException InvalidArgumentException
     */
 	public function testWordlistFail()
 	{
 		$configuration = array(
    		'minimumLength' => 8,
			'containsNumber' => 0,
			'containsSpecialCharacter' => 0,
			'rejectWordlist' => dirname(__FILE__).'/notthere.lst',
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('academics');
    	
    	$ok = $this->object->isPasswordValid();
 	}
 	
 	public function testWordlist()
 	{
 		$configuration = array(
    		'minimumLength' => 8,
			'containsNumber' => 0,
			'containsSpecialCharacter' => 0,
			'rejectWordlist' => dirname(__FILE__).'/blacklist.lst',
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('academics');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	
    	$this->assertTrue(in_array('PASSWORD_IN_BLACKLIST',$this->object->getErrors()));
    
    
    	$this->object->setPassword('gEheim%!!forme');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertTrue($ok); 
    	$this->assertTrue(count($this->object->getErrors())==0);   	
 	}
    
    /**
     * @expectedException InvalidArgumentException
     */
 	public function testWordlistSubstringFail()
 	{
 		$configuration = array(
    		'minimumLength' => 8,
			'containsNumber' => 0,
			'containsSpecialCharacter' => 0,
			'rejectWordlistSubstring' => dirname(__FILE__).'/notthere.lst',
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('academics');
    	
    	$ok = $this->object->isPasswordValid();
 	}
    
    public function testWordlistSubstring()
 	{
 		$configuration = array(
    		'minimumLength' => 8,
			'containsNumber' => 0,
			'containsSpecialCharacter' => 0,
			'rejectWordlistSubstring' => dirname(__FILE__).'/blacklist.lst',
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('TEST4academics%!');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertFalse($ok);
    	
    	$this->assertTrue(in_array('PASSWORD_PART_IN_BLACKLIST:academics',$this->object->getErrors()));
    
    
    	$this->object->setPassword('axTk%!!jkLIO');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertTrue($ok); 
    	$this->assertTrue(count($this->object->getErrors())==0);   	
 	}
 	
 	public function testScore1()
 	{
 		$configuration = array(
  
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('secret');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertTrue($ok);
    	
    	$score = $this->object->getScore();
    	
    	$this->assertEquals($score,0);   	
 	}
    
    public function testScore2()
 	{
 		$configuration = array(
  
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('secret4me');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertTrue($ok);
    	
    	$score = $this->object->getScore();
    	
    	$this->assertEquals(15,$score);   	
 	}
 	
 	public function testScore3()
 	{
 		$configuration = array(
  
    	);
    		
        $this->object = new KLGPasswordValidator($configuration);
 		   
    	$this->object->setUsername('klaus');
    	$this->object->setPassword('ghHT12%jd!!872');
    	
    	$ok = $this->object->isPasswordValid();
    	
    	$this->assertTrue($ok);
    	
    	$score = $this->object->getScore();
    	
    	$this->assertEquals(65,$score);   	
 	}
 	
    /**
     * @covers KLGPasswordValidator::getHumanReadableErrorMessage
     */
    public function testGetHumanReadableErrorMessage()
    {
    	$this->object = new KLGPasswordValidator(array());
        $error = $this->object->getHumanReadableErrorMessage('PASSWORD_CONTAINS_USERNAME');
        
        $this->assertEquals($error,'Das Passwort darf nicht den Benutzernamen enthalten.');
        
        $error = $this->object->getHumanReadableErrorMessage('PASSWORD_CONTAINS_SUBSTRING:foo');
        
        $this->assertEquals($error,"Das Passwort darf 'foo' nicht enthalten.");
    }
    
    
    public function isPreviousPassword($password)
    {
    	if ($password == 'secret4foo') return true;
    	return false;
    }
}

class EmptyClass
{
	
}
